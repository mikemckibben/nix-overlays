// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"github.com/concourse/concourse/atc"
	"github.com/concourse/concourse/atc/exec"
	"github.com/concourse/concourse/atc/exec/build"
)

type FakeRunState struct {
	ArtifactRepositoryStub        func() *build.Repository
	artifactRepositoryMutex       sync.RWMutex
	artifactRepositoryArgsForCall []struct {
	}
	artifactRepositoryReturns struct {
		result1 *build.Repository
	}
	artifactRepositoryReturnsOnCall map[int]struct {
		result1 *build.Repository
	}
	ResultStub        func(atc.PlanID, interface{}) bool
	resultMutex       sync.RWMutex
	resultArgsForCall []struct {
		arg1 atc.PlanID
		arg2 interface{}
	}
	resultReturns struct {
		result1 bool
	}
	resultReturnsOnCall map[int]struct {
		result1 bool
	}
	StoreResultStub        func(atc.PlanID, interface{})
	storeResultMutex       sync.RWMutex
	storeResultArgsForCall []struct {
		arg1 atc.PlanID
		arg2 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunState) ArtifactRepository() *build.Repository {
	fake.artifactRepositoryMutex.Lock()
	ret, specificReturn := fake.artifactRepositoryReturnsOnCall[len(fake.artifactRepositoryArgsForCall)]
	fake.artifactRepositoryArgsForCall = append(fake.artifactRepositoryArgsForCall, struct {
	}{})
	fake.recordInvocation("ArtifactRepository", []interface{}{})
	fake.artifactRepositoryMutex.Unlock()
	if fake.ArtifactRepositoryStub != nil {
		return fake.ArtifactRepositoryStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.artifactRepositoryReturns
	return fakeReturns.result1
}

func (fake *FakeRunState) ArtifactRepositoryCallCount() int {
	fake.artifactRepositoryMutex.RLock()
	defer fake.artifactRepositoryMutex.RUnlock()
	return len(fake.artifactRepositoryArgsForCall)
}

func (fake *FakeRunState) ArtifactRepositoryCalls(stub func() *build.Repository) {
	fake.artifactRepositoryMutex.Lock()
	defer fake.artifactRepositoryMutex.Unlock()
	fake.ArtifactRepositoryStub = stub
}

func (fake *FakeRunState) ArtifactRepositoryReturns(result1 *build.Repository) {
	fake.artifactRepositoryMutex.Lock()
	defer fake.artifactRepositoryMutex.Unlock()
	fake.ArtifactRepositoryStub = nil
	fake.artifactRepositoryReturns = struct {
		result1 *build.Repository
	}{result1}
}

func (fake *FakeRunState) ArtifactRepositoryReturnsOnCall(i int, result1 *build.Repository) {
	fake.artifactRepositoryMutex.Lock()
	defer fake.artifactRepositoryMutex.Unlock()
	fake.ArtifactRepositoryStub = nil
	if fake.artifactRepositoryReturnsOnCall == nil {
		fake.artifactRepositoryReturnsOnCall = make(map[int]struct {
			result1 *build.Repository
		})
	}
	fake.artifactRepositoryReturnsOnCall[i] = struct {
		result1 *build.Repository
	}{result1}
}

func (fake *FakeRunState) Result(arg1 atc.PlanID, arg2 interface{}) bool {
	fake.resultMutex.Lock()
	ret, specificReturn := fake.resultReturnsOnCall[len(fake.resultArgsForCall)]
	fake.resultArgsForCall = append(fake.resultArgsForCall, struct {
		arg1 atc.PlanID
		arg2 interface{}
	}{arg1, arg2})
	fake.recordInvocation("Result", []interface{}{arg1, arg2})
	fake.resultMutex.Unlock()
	if fake.ResultStub != nil {
		return fake.ResultStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.resultReturns
	return fakeReturns.result1
}

func (fake *FakeRunState) ResultCallCount() int {
	fake.resultMutex.RLock()
	defer fake.resultMutex.RUnlock()
	return len(fake.resultArgsForCall)
}

func (fake *FakeRunState) ResultCalls(stub func(atc.PlanID, interface{}) bool) {
	fake.resultMutex.Lock()
	defer fake.resultMutex.Unlock()
	fake.ResultStub = stub
}

func (fake *FakeRunState) ResultArgsForCall(i int) (atc.PlanID, interface{}) {
	fake.resultMutex.RLock()
	defer fake.resultMutex.RUnlock()
	argsForCall := fake.resultArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRunState) ResultReturns(result1 bool) {
	fake.resultMutex.Lock()
	defer fake.resultMutex.Unlock()
	fake.ResultStub = nil
	fake.resultReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRunState) ResultReturnsOnCall(i int, result1 bool) {
	fake.resultMutex.Lock()
	defer fake.resultMutex.Unlock()
	fake.ResultStub = nil
	if fake.resultReturnsOnCall == nil {
		fake.resultReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.resultReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRunState) StoreResult(arg1 atc.PlanID, arg2 interface{}) {
	fake.storeResultMutex.Lock()
	fake.storeResultArgsForCall = append(fake.storeResultArgsForCall, struct {
		arg1 atc.PlanID
		arg2 interface{}
	}{arg1, arg2})
	fake.recordInvocation("StoreResult", []interface{}{arg1, arg2})
	fake.storeResultMutex.Unlock()
	if fake.StoreResultStub != nil {
		fake.StoreResultStub(arg1, arg2)
	}
}

func (fake *FakeRunState) StoreResultCallCount() int {
	fake.storeResultMutex.RLock()
	defer fake.storeResultMutex.RUnlock()
	return len(fake.storeResultArgsForCall)
}

func (fake *FakeRunState) StoreResultCalls(stub func(atc.PlanID, interface{})) {
	fake.storeResultMutex.Lock()
	defer fake.storeResultMutex.Unlock()
	fake.StoreResultStub = stub
}

func (fake *FakeRunState) StoreResultArgsForCall(i int) (atc.PlanID, interface{}) {
	fake.storeResultMutex.RLock()
	defer fake.storeResultMutex.RUnlock()
	argsForCall := fake.storeResultArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRunState) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.artifactRepositoryMutex.RLock()
	defer fake.artifactRepositoryMutex.RUnlock()
	fake.resultMutex.RLock()
	defer fake.resultMutex.RUnlock()
	fake.storeResultMutex.RLock()
	defer fake.storeResultMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRunState) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.RunState = new(FakeRunState)
